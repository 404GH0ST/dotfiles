#!/usr/bin/env bash
#  ██████╗ ██╗ ██████╗███████╗    ██╗███╗   ██╗███████╗████████╗ █████╗ ██╗     ██╗     ███████╗██████╗
#  ██╔══██╗██║██╔════╝██╔════╝    ██║████╗  ██║██╔════╝╚══██╔══╝██╔══██╗██║     ██║     ██╔════╝██╔══██╗
#  ██████╔╝██║██║     █████╗      ██║██╔██╗ ██║███████╗   ██║   ███████║██║     ██║     █████╗  ██████╔╝
#  ██╔══██╗██║██║     ██╔══╝      ██║██║╚██╗██║╚════██║   ██║   ██╔══██║██║     ██║     ██╔══╝  ██╔══██╗
#  ██║  ██║██║╚██████╗███████╗    ██║██║ ╚████║███████║   ██║   ██║  ██║███████╗███████╗███████╗██║  ██║
#  ╚═╝  ╚═╝╚═╝ ╚═════╝╚══════╝    ╚═╝╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝╚═╝  ╚═╝

CRE=$(tput setaf 1)
CYE=$(tput setaf 3)
CGR=$(tput setaf 2)
CBL=$(tput setaf 4)
BLD=$(tput bold)
CNC=$(tput sgr0)

backup_folder=~/.RiceBackup
date=$(date +%Y%m%d-%H%M%S)

logo() {
	local text="${1:?}"
	printf ' %s [%s%s %s%s %s]%s\n\n' "${CRE}" "${CNC}" "${CYE}" "${text}" "${CNC}" "${CRE}" "${CNC}"
}

########## ---------- You must not run this as root ---------- ##########

if [ "$(id -u)" = 0 ]; then
	echo "This script MUST NOT be run as root user."
	exit 1
fi

home_dir=$HOME
current_dir=$(pwd)

if [ "$current_dir" != "$home_dir" ]; then
	printf "%s%sThe script must be executed from the HOME directory.%s\n" "${BLD}" "${CYE}" "${CNC}"
	exit 1
fi

########## ---------- Welcome ---------- ##########

logo "Welcome!"
printf '%s%sThis script will check if you have the necessary dependencies, and if not, it will install them. Then, it will clone my repository in your HOME directory.\nAfter that, it will create a backup of your files, and then copy the new files to your computer.\n\nMy dotfiles DO NOT modify any of your system configurations.\nYou will be prompted for your root password to install missing dependencies and/or to switch to zsh shell if its not your default.\n\nThis script doesnt have the potential power to break your system, it only copies files from my repository to your HOME directory.%s\n\n' "${BLD}" "${CRE}" "${CNC}"

while true; do
	read -rp " Do you wish to continue? [y/N]: " yn
	case $yn in
	[Yy]*) break ;;
	[Nn]*) exit ;;
	*) printf " Error: just write 'y' or 'n'\n\n" ;;
	esac
done
clear

########## ---------- Install packages ---------- ##########

logo "Installing needed packages.."

dependencies=(alacritty ark base-devel bat brightnessctl bluez bluez-utils blueman clipcat dunst dolphin eza firefox feh ffmpegthumbs git gst-plugin-pipewire hyprland imagemagick jq
	jgmenu libdbusmenu-gtk3 libva-nvidia-driver libnotify libwebp kde-cli-tools mpc mpd neovim ncmpcpp noto-fonts-cjk npm networkmanager network-manager-applet nvidia nvidia-utils os-prober pamixer pacman-contrib
	papirus-icon-theme physlock pipewire pipewire-alsa pipewire-audio pipewire-jack pipewire-pulse pavucontrol playerctl polkit-gnome python-gobject python-pyamdgpuinfo parallel qt5-imageformats qt5-graphicaleffects qt5-quickcontrols2 qt5-svg redshift rofi rustup sddm tmux ttf-inconsolata ttf-jetbrains-mono ttf-jetbrains-mono-nerd
	ttf-joypixels ttf-terminus-nerd udiskie vim waybar webp-pixbuf-loader wireplumber xclip xdg-user-dirs xdg-desktop-portal-hyprland zsh zsh-autosuggestions zsh-history-substring-search zsh-syntax-highlighting)

is_installed() {
	pacman -Q "$1" &>/dev/null
}

printf "%s%sChecking for required packages...%s\n" "${BLD}" "${CBL}" "${CNC}"
for package in "${dependencies[@]}"; do
	if ! is_installed "$package"; then
		if sudo pacman -S "$package" --noconfirm >/dev/null 2>>RiceError.log; then
			printf "%s%s%s %shas been installed succesfully.%s\n" "${BLD}" "${CYE}" "$package" "${CBL}" "${CNC}"
			sleep 1
		else
			printf "%s%s%s %shas not been installed correctly. See %sRiceError.log %sfor more details.%s\n" "${BLD}" "${CYE}" "$package" "${CRE}" "${CBL}" "${CRE}" "${CNC}"
			sleep 1
		fi
	else
		printf '%s%s%s %sis already installed on your system!%s\n' "${BLD}" "${CYE}" "$package" "${CGR}" "${CNC}"
		sleep 1
	fi
done
sleep 5
clear

########## ---------- Preparing Folders ---------- ##########

# Verifies if the archive user-dirs.dirs doesn't exist in ~/.config
if [ ! -e "$HOME/.config/user-dirs.dirs" ]; then
	xdg-user-dirs-update
fi

########## ---------- Cloning the Rice! ---------- ##########

logo "Downloading dotfiles"

repo_url="https://github.com/404GH0ST/dotfiles"
repo_dir="$HOME/dotfiles"

# Verifies if the folder of the repository exists, and if it does, deletes it
if [ -d "$repo_dir" ]; then
	printf "Removing existing dotfiles repository\n"
	rm -rf "$repo_dir"
fi

# Clone the repository
printf "Cloning dotfiles from %s\n" "$repo_url"
git clone --depth=1 "$repo_url" "$repo_dir"
sleep 2
clear

########## ---------- Backup files ---------- ##########

logo "Backup files"

printf "\nBackup files will be stored in %s%s%s/.RiceBackup%s \n\n" "${BLD}" "${CRE}" "$HOME" "${CNC}"
sleep 10

[ ! -d "$backup_folder" ] && mkdir -p "$backup_folder"

for folder in cava alacritty dunst ncmpcpp zsh mpd paru; do
	if [ -d "$HOME/.config/$folder" ]; then
		if mv "$HOME/.config/$folder" "$backup_folder/${folder}_$date" 2>>RiceError.log; then
			printf "%s%s%s folder backed up successfully at %s%s/%s_%s%s\n" "${BLD}" "${CGR}" "$folder" "${CBL}" "$backup_folder" "$folder" "$date" "${CNC}"
			sleep 1
		else
			printf "%s%sFailed to backup %s folder. See %sRiceError.log%s\n" "${BLD}" "${CRE}" "$folder" "${CBL}" "${CNC}"
			sleep 1
		fi
	else
		printf "%s%s%s folder does not exist, %sno backup needed%s\n" "${BLD}" "${CGR}" "$folder" "${CYE}" "${CNC}"
		sleep 1
	fi
done

if [ -f ~/.zshrc ]; then
	if mv ~/.zshrc "$backup_folder"/.zshrc_"$date" 2>>RiceError.log; then
		printf "%s%s.zshrc file backed up successfully at %s%s/.zshrc_%s%s\n" "${BLD}" "${CGR}" "${CBL}" "$backup_folder" "${date}" "${CNC}"
	else
		printf "%s%sFailed to backup .zshrc file. See %sRiceError.log%s\n" "${BLD}" "${CRE}" "${CBL}" "${CNC}"
	fi
else
	printf "%s%sThe file .zshrc does not exist, %sno backup needed%s\n" "${BLD}" "${CGR}" "${CYE}" "${CNC}"
fi

printf "%s%sDone!!%s\n\n" "${BLD}" "${CGR}" "${CNC}"
sleep 5

########## ---------- Copy the Rice! ---------- ##########

logo "Installing dotfiles.."
printf "Copying files to respective directories..\n"

[ ! -d ~/.config ] && mkdir -p ~/.config
[ ! -d ~/.local/bin ] && mkdir -p ~/.local/bin
[ ! -d ~/.local/share ] && mkdir -p ~/.local/share

for dirs in "$repo_dir"/config/*; do
	dir_name=$(basename "$dirs")

	if cp -R "${dirs}" ~/.config/ 2>>RiceError.log; then
		printf "%s%s%s %sconfiguration installed succesfully%s\n" "${BLD}" "${CYE}" "${dir_name}" "${CGR}" "${CNC}"
		sleep 1
	else
		printf "%s%s%s %sconfiguration failed to been installed, see %sRiceError.log %sfor more details.%s\n" "${BLD}" "${CYE}" "${dir_name}" "${CRE}" "${CBL}" "${CRE}" "${CNC}"
		sleep 1
	fi
done

if sudo cp "$repo_dir"/misc/sddm/sddm.conf /etc/sddm.conf 2>>RiceError.log; then
	if sudo tar xzf "$repo_dir"/misc/sddm/sugar-candy.tar.gz --directory /usr/share/sddm/themes/ 2>>RiceError.log; then
		printf "%s%sSddm sugar candy theme %scopied succesfully!%s\n" "${BLD}" "${CYE}" "${CGR}" "${CNC}"
		sleep 1
	else
		printf "%s%sSddm theme %sfailed to been copied, see %sRiceError.log %sfor more details.%s\n" "${BLD}" "${CYE}" "${CRE}" "${CBL}" "${CRE}" "${CNC}"
		sleep 1
	fi
else
	printf "%s%sSddm theme %sfailed to been copied, see %sRiceError.log %sfor more details.%s\n" "${BLD}" "${CYE}" "${CRE}" "${CBL}" "${CRE}" "${CNC}"
	sleep 1
fi

cp -f "$repo_dir"/home/.zshrc "$HOME"
fc-cache -rv >/dev/null 2>&1

if bash $repo_dir/scripts/install_grub_theme.sh 2>>RiceError.log; then
	printf "%s%sGrub catppuccin theme %scopied succesfully!%s\n" "${BLD}" "${CYE}" "${CGR}" "${CNC}"
	sleep 1
else
	printf "%s%sGrub theme %sfailed to been copied, see %sRiceError.log %sfor more details.%s\n" "${BLD}" "${CYE}" "${CRE}" "${CBL}" "${CRE}" "${CNC}"
	sleep 1
fi

if bash $repo_dir/scripts/init_clipcat_configuration.sh 2>>RiceError.log; then
	printf "%s%sClipcat %sinitialized succesfully!%s\n" "${BLD}" "${CYE}" "${CGR}" "${CNC}"
	sleep 1
else
	printf "%s%sClipcat %sfailed to been initialized, see %sRiceError.log %sfor more details.%s\n" "${BLD}" "${CYE}" "${CRE}" "${CBL}" "${CRE}" "${CNC}"
	sleep 1
fi

if bash $repo_dir/scripts/configure_nvidia.sh 2>>RiceError.log; then
	printf "%s%sNvidia %sconfigured succesfully!%s\n" "${BLD}" "${CYE}" "${CGR}" "${CNC}"
	sleep 1
else
	printf "%s%sNvidia %sfailed to been configured, see %sRiceError.log %sfor more details.%s\n" "${BLD}" "${CYE}" "${CRE}" "${CBL}" "${CRE}" "${CNC}"
	sleep 1
fi

printf "\n\n%s%sFiles copied succesfully!!%s\n" "${BLD}" "${CGR}" "${CNC}"
sleep 5

########## ---------- Installing Paru & others ---------- ##########

logo "installing Paru, & cava"

# Installing Paru
if command -v paru >/dev/null 2>&1; then
	printf "%s%sParu is already installed%s\n" "${BLD}" "${CGR}" "${CNC}"
else
	printf "%s%sInstalling paru%s\n" "${BLD}" "${CBL}" "${CNC}"
	{
		cd "$HOME" || exit
		rustup default stable
		git clone https://aur.archlinux.org/paru.git
		cd paru || exit
		makepkg -si --noconfirm
	} || {
		printf "\n%s%sFailed to install Paru. You may need to install it manually%s\n" "${BLD}" "${CRE}" "${CNC}"
	}
fi

# Installing cava
if command -v cava >/dev/null 2>&1; then
	printf "\n%s%scava is already installed%s\n" "${BLD}" "${CGR}" "${CNC}"
else
	printf "\n%s%sInstalling cava, this should be fast!%s\n" "${BLD}" "${CBL}" "${CNC}"
	paru -S cava --skipreview --noconfirm
fi

########## ---------- Enabling MPD service ---------- ##########

logo "Enabling mpd service"

# Verifica si el servicio mpd está habilitado a nivel global (sistema)
if systemctl is-enabled --quiet mpd.service; then
	printf "\n%s%sDisabling and stopping the global mpd service%s\n" "${BLD}" "${CBL}" "${CNC}"
	sudo systemctl stop mpd.service
	sudo systemctl disable mpd.service
fi

printf "\n%s%sEnabling and starting the user-level mpd service%s\n" "${BLD}" "${CYE}" "${CNC}"
systemctl --user enable --now mpd.service

printf "\n%s%sEnabling and starting the sddm service%s\n" "${BLD}" "${CYE}" "${CNC}"
sudo systemctl enable sddm.service

printf "%s%sDone!!%s\n\n" "${BLD}" "${CGR}" "${CNC}"
sleep 2

########## --------- Changing shell to zsh ---------- ##########

logo "Changing default shell to zsh"

if [[ $SHELL != "/usr/bin/zsh" ]]; then
	printf "\n%s%sChanging your shell to zsh. Your root password is needed.%s\n\n" "${BLD}" "${CYE}" "${CNC}"
	# Cambia la shell a zsh
	chsh -s /usr/bin/zsh
	printf "%s%sShell changed to zsh. Please reboot.%s\n\n" "${BLD}" "${CGR}" "${CNC}"
else
	printf "%s%sYour shell is already zsh\nGood bye! installation finished, now reboot%s\n" "${BLD}" "${CGR}" "${CNC}"
fi
zsh
